#Kode som strekker ut histogrammet til et bilde, og gj√∏r kontrasten til bildet bedre

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread('/Users/Ellaberg/Desktop/lowcontrast.png', cv2.IMREAD_GRAYSCALE)

# Define the minimum and maximum desired pixel values after contrast stretching
min_output = 0  # Minimum output pixel value
max_output = 255  # Maximum output pixel value

# Find the minimum and maximum pixel values in the image
min_input = np.min(image)
max_input = np.max(image)

# Calculate the contrast-stretched values for each pixel in the image
stretched_image = np.uint8((image - min_input) / (max_input - min_input) * (max_output - min_output) + min_output)

# Calculate the original and stretched histograms
original_hist = cv2.calcHist([image], [0], None, [256], [0, 256])
stretched_hist = cv2.calcHist([stretched_image], [0], None, [256], [0, 256])

# Convert the histograms to NumPy arrays for easy manipulation
original_hist = np.squeeze(original_hist)
stretched_hist = np.squeeze(stretched_hist)

# Plot the original and stretched histograms
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Original Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')
plt.bar(np.arange(256), original_hist, width=0.7, color='black')

plt.subplot(1, 2, 2)
plt.title('Stretched Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')
plt.bar(np.arange(256), stretched_hist, width=0.7, color='black')

plt.tight_layout()
plt.show()

# Display the original and contrast-stretched images
cv2.imshow('Original Image', image)
cv2.imshow('Stretched Image', stretched_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
