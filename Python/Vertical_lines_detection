import cv2
import numpy as np

# Load the image
image_path = '/Users/Ellaberg/Desktop/Svar_rad.png'
image = cv2.imread(image_path)

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Preprocess the image (you can experiment with different techniques)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Apply the Sobel filter for vertical edge detection
sobel_vertical = cv2.Sobel(blurred, cv2.CV_64F, 1, 0, ksize=1)

# Create a binary mask for vertical edges
vertical_mask = cv2.threshold(np.absolute(sobel_vertical).astype(np.uint8), 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]

# Find contours in the mask
contours, _ = cv2.findContours(vertical_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Create a copy of the original image
output_image = image.copy()

# Minimum height threshold for vertical lines (adjust as needed)
min_line_height = 40

# Iterate over the detected contours
for contour in contours:
    x, y, w, h = cv2.boundingRect(contour)

    # Check if the contour is a vertical line with the minimum height
    if h >= min_line_height:
        # Draw a blue rectangle on the output image
        cv2.rectangle(output_image, (x, y), (x + w, y + h), (255, 0, 0), 2)

        # Crop the region between the lines
        region_between_lines = image[y:y + h, x:x + w]

        # Display the region between lines
        cv2.imshow("Region Between Lines", region_between_lines)
        cv2.waitKey(0)

# Display the image with detected vertical lines
cv2.imshow("Image with Vertical Lines", output_image)
cv2.waitKey(0)

# Close all OpenCV windows
cv2.destroyAllWindows()
